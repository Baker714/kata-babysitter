{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitRepos\\\\kata-babysitter\\\\src\\\\components\\\\CalculatePayForm.js\";\nimport React, { Component } from 'react';\nimport './CalculatePayForm.css';\nimport TimePicker from 'react-time-picker'; //going with react-time-picker\n//import '../../node_modules/jquery-timepicker/jquery.timepicker.js';\n//import '../../node_modules/jquery-timepicker/jquery.timepicker.css';\n//tried various timepickers, couldnt' get jquery timepicker to work\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst timeArray = [\"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"00\", \"01\", \"02\", \"03\", \"04\"]; //creating timeArray list to properly calculate hours babysitting. Changed to two length strings to account for half/quarter hours.\n//Changing back because Full Hours (5:30 t Midnight wouldn't make sense otherwise)\n\nclass CalculatePayForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTime: \"\",\n      bedTime: \"\",\n      endTime: \"\"\n    };\n    this.submitForm = this.submitForm.bind(this); //this.amountToCharge = React.createRef(); tried to create ref to update amountToCharge value, found better way with querySelector. Update, did not find a better way\n  }\n\n  changeStartTimeField(event) {\n    console.log(event);\n    this.setState({\n      startTime: event\n    }); //tartTimeString.substring(0,2)});\n  } //let startTimeString = event.toString(); Was going to grab only substring to account for half hours, going to do that in the calculatePay method now\n  // console.log(startTimeHour);\n  //if(event < \"17:00\"){\n  //alert(\"Start Time must be after 5:00P.M.\");\n  // console.log(document.getElementById(\"startTimePicker\").value); logging\n  // console.log(document.querySelector(\"#startTimePicker\").value);\n  //this.refs.startTimePicker.value = \"\"; setting up the ref didn't quite work either\n  //this.setState({startTime: null});\n  //console.log(this.startTimeRef.value);\n  //this.startTimeRef.current.value = null;\n  //document.querySelector('startTimePicker').value = \"\"; tried to set value to empty, couldn't grab it this way\n  //}\n\n\n  changeBedTimeField(event) {\n    this.setState({\n      bedTime: event\n    }); //bedTimeHour});\n    //let bedTimeString = event.toString(); Was going to convert to grab substring, unneeded now\n    // console.log(event.toString());\n  }\n\n  changeEndTimeField(event) {\n    this.setState({\n      endTime: event\n    });\n  } // let endTimeString = event.toString();\n  // console.log(event);\n  // if(event > \"04:00\") //Removed validation here, no way to reset timepicker easily\n  //   alert(\"End Time must be before 4:00A.M.\");\n  // else\n\n\n  submitForm(event) {\n    event.preventDefault(); // let startTime = this.state.startTime;\n    // let bedTime = this.state.bedTime;\n    // let endTime = this.state.endTime;\n\n    let startTimeString = this.state.startTime.toString();\n    let bedTimeString = this.state.bedTime.toString();\n    let endTimeString = this.state.endTime.toString(); // console.log(typeof startTime);\n\n    if (this.validateTimes(startTimeString, bedTimeString, endTimeString)) {\n      this.calculatePay(startTimeString, bedTimeString, endTimeString);\n    }\n  } //Put this in its own method for easier unit testing\n\n\n  calculatePay(startTimeString, bedTimeString, endTimeString) {\n    let amountToCharge = 0;\n    let startTimeHour = startTimeString.substring(0, 2);\n    let bedTimeHour = bedTimeString.substring(0, 2);\n    let endTimeHour = endTimeString.substring(0, 2);\n    amountToCharge += Math.abs(timeArray.indexOf(bedTimeHour) - timeArray.indexOf(startTimeHour)) * 12;\n    amountToCharge += Math.abs(timeArray.indexOf(\"00\") - timeArray.indexOf(bedTimeHour)) * 8;\n    amountToCharge += Math.abs(timeArray.indexOf(endTimeHour) - timeArray.indexOf(\"00\")) * 16;\n    document.querySelector('#amountToCharge').innerText = \"$\" + amountToCharge.toFixed(2);\n  }\n\n  validateTimes(startTimeString, bedTimeString, endTimeString) {\n    let startTimeHour = startTimeString.substring(0, 2);\n    let bedTimeHour = bedTimeString.substring(0, 2);\n    let endTimeHour = endTimeString.substring(0, 2);\n    let alertMessage = \"\"; // console.log(startTime); //Logging for testing\n\n    if (startTimeString === \"\" || bedTimeString === \"\" || endTimeString === \"\") {\n      alertMessage += \"Please fill in all fields before submitting\";\n      alert(alertMessage);\n      return false;\n    }\n\n    if (startTimeString.substring(3, 5) !== \"00\" || bedTimeString.substring(3, 5) !== \"00\" || endTimeString.substring(3, 5) !== \"00\") {\n      alertMessage += \"Please use only whole hours\";\n      alert(alertMessage);\n      return false;\n    }\n\n    if (timeArray.indexOf(endTimeHour) === -1 || timeArray.indexOf(endTimeHour) <= timeArray.indexOf(\"00\")) {\n      alertMessage += \"End Time must be between Midnight and 4:00A.M.\";\n      alert(alertMessage);\n      return false;\n    }\n\n    if (timeArray.indexOf(bedTimeHour) !== -1 && timeArray.indexOf(bedTimeHour) > timeArray.indexOf(\"00\")) {\n      alertMessage += \"Bed Time must be before or at Midnight\";\n      alert(alertMessage);\n      return false;\n    } // console.log(timeArray.indexOf(startTime)); //Logging for testing\n\n\n    if (timeArray.indexOf(startTimeHour) === -1) {\n      alertMessage += \"Start Time must be between 5:00P.M. and Bed Time\";\n      alert(alertMessage);\n      return false;\n    }\n\n    if (timeArray.indexOf(bedTimeHour) === -1 || timeArray.indexOf(bedTimeHour) <= timeArray.indexOf(startTimeHour) || timeArray.indexOf(bedTimeHour) >= timeArray.indexOf(endTimeHour)) {\n      alertMessage += \"Bed Time must be between Start Time and End Time\";\n      alert(alertMessage);\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"calcPayDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitForm,\n        id: \"calcPayForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timePickerDiv\",\n          id: \"startTimeDiv\",\n          children: [\"Start Time: \", /*#__PURE__*/_jsxDEV(TimePicker, {\n            id: \"startTimePicker\",\n            disableClock: true,\n            value: this.state.startTime,\n            onChange: this.changeStartTimeField.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 72\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timePickerDiv\",\n          id: \"bedTimeDiv\",\n          children: [\"Bed Time: \", /*#__PURE__*/_jsxDEV(TimePicker, {\n            id: \"bedTimePicker\",\n            disableClock: true,\n            value: this.state.bedTime,\n            onChange: this.changeBedTimeField.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timePickerDiv\",\n          id: \"endTimeDiv\",\n          children: [\"End Time: \", /*#__PURE__*/_jsxDEV(TimePicker, {\n            id: \"endTimePicker\",\n            disableClock: true,\n            value: this.state.endTime,\n            onChange: this.changeEndTimeField.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Calculate Pay\",\n          id: \"calcPayButton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"amountToCharge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CalculatePayForm;","map":{"version":3,"sources":["D:/GitRepos/kata-babysitter/src/components/CalculatePayForm.js"],"names":["React","Component","TimePicker","timeArray","CalculatePayForm","constructor","props","state","startTime","bedTime","endTime","submitForm","bind","changeStartTimeField","event","console","log","setState","changeBedTimeField","changeEndTimeField","preventDefault","startTimeString","toString","bedTimeString","endTimeString","validateTimes","calculatePay","amountToCharge","startTimeHour","substring","bedTimeHour","endTimeHour","Math","abs","indexOf","document","querySelector","innerText","toFixed","alertMessage","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './CalculatePayForm.css';\r\nimport TimePicker from 'react-time-picker'; //going with react-time-picker\r\n//import '../../node_modules/jquery-timepicker/jquery.timepicker.js';\r\n//import '../../node_modules/jquery-timepicker/jquery.timepicker.css';\r\n//tried various timepickers, couldnt' get jquery timepicker to work\r\n\r\nconst timeArray = [\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"00\",\"01\",\"02\",\"03\",\"04\"]; //creating timeArray list to properly calculate hours babysitting. Changed to two length strings to account for half/quarter hours.\r\n                                                                                                                    //Changing back because Full Hours (5:30 t Midnight wouldn't make sense otherwise)\r\n\r\nclass CalculatePayForm extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {startTime: \"\", bedTime: \"\", endTime: \"\"};\r\n    this.submitForm = this.submitForm.bind(this);\r\n    //this.amountToCharge = React.createRef(); tried to create ref to update amountToCharge value, found better way with querySelector. Update, did not find a better way\r\n  }\r\n\r\n  changeStartTimeField(event){\r\n    console.log(event);\r\n    this.setState({startTime: event});//tartTimeString.substring(0,2)});\r\n  }\r\n    //let startTimeString = event.toString(); Was going to grab only substring to account for half hours, going to do that in the calculatePay method now\r\n    // console.log(startTimeHour);\r\n    //if(event < \"17:00\"){\r\n      //alert(\"Start Time must be after 5:00P.M.\");\r\n      // console.log(document.getElementById(\"startTimePicker\").value); logging\r\n      // console.log(document.querySelector(\"#startTimePicker\").value);\r\n      //this.refs.startTimePicker.value = \"\"; setting up the ref didn't quite work either\r\n      //this.setState({startTime: null});\r\n      //console.log(this.startTimeRef.value);\r\n      //this.startTimeRef.current.value = null;\r\n      //document.querySelector('startTimePicker').value = \"\"; tried to set value to empty, couldn't grab it this way\r\n    //}\r\n\r\n  changeBedTimeField(event){\r\n    this.setState({bedTime: event});//bedTimeHour});\r\n    //let bedTimeString = event.toString(); Was going to convert to grab substring, unneeded now\r\n    // console.log(event.toString());\r\n  }\r\n\r\n  changeEndTimeField(event){\r\n    this.setState({endTime: event});\r\n  }\r\n    // let endTimeString = event.toString();\r\n    // console.log(event);\r\n    // if(event > \"04:00\") //Removed validation here, no way to reset timepicker easily\r\n    //   alert(\"End Time must be before 4:00A.M.\");\r\n    // else\r\n\r\n  submitForm(event) {\r\n    event.preventDefault();\r\n    // let startTime = this.state.startTime;\r\n    // let bedTime = this.state.bedTime;\r\n    // let endTime = this.state.endTime;\r\n    let startTimeString = this.state.startTime.toString();\r\n    let bedTimeString = this.state.bedTime.toString();\r\n    let endTimeString = this.state.endTime.toString();\r\n    // console.log(typeof startTime);\r\n    if(this.validateTimes(startTimeString, bedTimeString, endTimeString)){\r\n      this.calculatePay(startTimeString, bedTimeString, endTimeString);\r\n    }\r\n  }\r\n\r\n  //Put this in its own method for easier unit testing\r\n  calculatePay(startTimeString, bedTimeString, endTimeString){\r\n    let amountToCharge = 0;\r\n    let startTimeHour = startTimeString.substring(0,2);\r\n    let bedTimeHour = bedTimeString.substring(0,2);\r\n    let endTimeHour = endTimeString.substring(0,2);\r\n\r\n    amountToCharge += Math.abs((timeArray.indexOf(bedTimeHour)-timeArray.indexOf(startTimeHour)))*12;\r\n    amountToCharge += Math.abs((timeArray.indexOf(\"00\")-timeArray.indexOf(bedTimeHour)))*8;\r\n    amountToCharge += Math.abs((timeArray.indexOf(endTimeHour)-timeArray.indexOf(\"00\")))*16;\r\n    document.querySelector('#amountToCharge').innerText = \"$\"+amountToCharge.toFixed(2);\r\n  }\r\n\r\n  validateTimes(startTimeString, bedTimeString, endTimeString) {\r\n    let startTimeHour = startTimeString.substring(0,2);\r\n    let bedTimeHour = bedTimeString.substring(0,2);\r\n    let endTimeHour = endTimeString.substring(0,2);\r\n\r\n    let alertMessage = \"\";\r\n    // console.log(startTime); //Logging for testing\r\n    if(startTimeString === \"\" || bedTimeString === \"\" || endTimeString === \"\"){\r\n      alertMessage += \"Please fill in all fields before submitting\";\r\n      alert(alertMessage);\r\n      return false;\r\n    }\r\n\r\n    if(startTimeString.substring(3,5) !== \"00\" || bedTimeString.substring(3,5) !== \"00\"  || endTimeString.substring(3,5) !== \"00\" ){\r\n      alertMessage += \"Please use only whole hours\";\r\n      alert(alertMessage);\r\n      return false;\r\n    }\r\n\r\n    if(timeArray.indexOf(endTimeHour) === -1 || (timeArray.indexOf(endTimeHour) <= timeArray.indexOf(\"00\"))){\r\n      alertMessage += \"End Time must be between Midnight and 4:00A.M.\";\r\n      alert(alertMessage);\r\n      return false;\r\n    }\r\n\r\n    if(timeArray.indexOf(bedTimeHour) !== -1 && timeArray.indexOf(bedTimeHour) > timeArray.indexOf(\"00\")){\r\n      alertMessage += \"Bed Time must be before or at Midnight\";\r\n      alert(alertMessage);\r\n      return false;\r\n    }\r\n    // console.log(timeArray.indexOf(startTime)); //Logging for testing\r\n    if(timeArray.indexOf(startTimeHour) === -1){\r\n      alertMessage += \"Start Time must be between 5:00P.M. and Bed Time\";\r\n      alert(alertMessage);\r\n      return false;\r\n    }\r\n\r\n    if(timeArray.indexOf(bedTimeHour) === -1 || timeArray.indexOf(bedTimeHour) <= timeArray.indexOf(startTimeHour) || timeArray.indexOf(bedTimeHour) >= timeArray.indexOf(endTimeHour)){\r\n      alertMessage += \"Bed Time must be between Start Time and End Time\";\r\n      alert(alertMessage);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"calcPayDiv\">\r\n        <form onSubmit={this.submitForm} id=\"calcPayForm\">\r\n          <div className=\"timePickerDiv\" id=\"startTimeDiv\">Start Time: <TimePicker id=\"startTimePicker\" disableClock={true} value={this.state.startTime} onChange={this.changeStartTimeField.bind(this)}/>\r\n          </div>\r\n          <br/>\r\n          <div className=\"timePickerDiv\" id=\"bedTimeDiv\">Bed Time: <TimePicker id=\"bedTimePicker\" disableClock={true} value={this.state.bedTime} onChange={this.changeBedTimeField.bind(this)}/>\r\n          </div>\r\n          <br/>\r\n          <div className=\"timePickerDiv\" id=\"endTimeDiv\">End Time: <TimePicker id=\"endTimePicker\" disableClock={true} value={this.state.endTime} onChange={this.changeEndTimeField.bind(this)}/>\r\n          </div>\r\n          <br/>\r\n          <input type=\"submit\" value=\"Calculate Pay\" id=\"calcPayButton\"/>\r\n        </form>\r\n        <br/>\r\n        <div id=\"amountToCharge\"></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CalculatePayForm;\r\n"]},"metadata":{},"sourceType":"module"}